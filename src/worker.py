from datetime import datetime, timezone

from src import globals
from src.db import register_payment_db
from src.models import Payment


async def make_payment_request(payment_payload, max_attempts=10) -> str:
    urls = [
        (f"{globals.payment_processor_url}/payments", "default"),
        (f"{globals.fallback_payment_processor_url}/payments", "fallback"),
    ]
    attempt = 0
    while attempt < max_attempts:
        url, processor = urls[attempt % 2]
        globals.logger.info(f"Attempt {attempt + 1}: Sending payment request to {url}")
        async with globals.session.post(url, json=payment_payload) as response:
            if response.status == 200:
                globals.logger.info(
                    f"Payment request successful: {await response.json()}"
                )
                return processor
            attempt += 1
    raise Exception("Both payment processors failed after multiple attempts.")


async def payment_worker():
    while True:
        payment_request = await globals.payment_queue.get()
        if payment_request is None:
            break
        requested_at = datetime.now(timezone.utc)
        payment_request["requestedAt"] = requested_at.isoformat()
        try:
            processor = await make_payment_request(payment_request)
            payment = Payment(
                id=None,  # ID will be auto-generated by the database
                correlation_id=payment_request["correlationId"],
                amount=payment_request["amount"],
                requested_at=requested_at.isoformat(),
                payment_processor=processor,
            )
            await register_payment_db(payment)
        except Exception as e:
            globals.logger.error(f"Error processing payment request: {e}")

        globals.payment_queue.task_done()
